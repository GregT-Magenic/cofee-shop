@startuml

title Coffee Shop Model

namespace shared_kernel {

  class Size {
    +quanity: BigDecimal
  }
  Size .. "1" MeasurementUnit: uses

  enum MeasurementUnit {
    PIECES
    KILOGRAMS
    POUNDS
    LITRES
    FLUID_OUNCE
  }

  class CurrencyValue {
    +quanity: BigDecimal
  }
  CurrencyValue .. "1" Currency: uses

  enum Currency {
    US_DOLLAR
    MEXICAN_PESO
    BITCOIN
  }

  class OrderStatusUpdated <<event>> {
    +orderId: integer
    +dateTime: ZonedDateTime
  }
  OrderStatusUpdated .. "1" OrderStatus: uses

  enum OrderStatus {
    RECEIVING
    SUBMITTED
    CANCELLED
  }

  class BillStatusUpdated <<event>> {
    +billId: integer
    +orderId: integer
    +dateTime: ZonedDateTime
  }
  BillStatusUpdated .. "1" BillStatus: uses

  enum BillStatus {
    RECEIVING
    PAID
    CANCELLED
  }

  class KitchenOrderStatusUpdated <<event>> {
    +kitchenOrderId: integer
    +orderId: integer
    +dateTime: ZonedDateTime
  }
  KitchenOrderStatusUpdated .. "1" KitchenStatus: uses

  enum KitchenStatus {
    PENDING
    PREPARING
    READY
  }

}

namespace ordering {

  class CoffeeShop {
    +id: integer
    +name: String

    Menu createMenu()
    void addMenuItem(toMenu: Menu, foodBeverages: FoodBeverage[], pricingOffers: PricingOffer[])
    void removeMenuItem(fromMenu: Menu, menuItem: MenuItem)
    void deleteMenu(Menu)

    Order createOrder()
    void addOrderItem(toOrder: Order, menuItem: MenuItem, quantity: integer, specialInstructions: String)
    void removeOrderItem(fromOrder: Order, orderItem: OrderItem)
    CurrencyValue calculatePrice(order: Order)
    void submitForPayment(order: Order) emits shared_kernel.OrderStatusUpdated
    void cancelOrder(order: Order)
  }

  note right
    should coffee shop attempt
    to synchronize/validate menu
    items with kitchen capability?
  end note

  CoffeeShop *-- "0..*" Menu
  CoffeeShop *-- "0..*" Order
  

  class Menu {}
  Menu o-- "0..*" MenuItem

  class Order {
    +id: integer
    +customerName: String
    +status: shared_kernel.OrderStatus
  }
  Order *-- "0..*" OrderItem

  class OrderItem {
    +id: integer
    +specialInstructions: String
    +quantity: integer
    +size: shared_kernel.Size
  }
  OrderItem o-- "1" MenuItem

  MenuItem *-- "1..*" FoodBeverage
  MenuItem *-- "1..*" PricingOffer

    class FoodBeverage {
    +name: String
    +description: String
  }

  note right
    should this reference a kitchen object?
  end note

  class PricingOffer {
    +name: String
    +size: shared_kernel.Size
    +currencyValue: shared_kernel.CurrencyValue
  }

}

namespace payment {

  class Bill {
    +id: integer
    +currencyValue: shared_kernel.CurrencyValue
    +status: shared_kernel.BillStatus: uses
    void addPayment(currencyValue: shared_kernel.CurrencyValue, paymentMethod: PAYMENT_METHOD)
    void removePayment(payment: Payment)
    void processPayments()
    void cancel()
  }
  Bill o-- "1" ordering.Order
  Bill *-- "1..*" Payment

  class Payment {
    +currencyValue: shared_kernel.CurrencyValue
    +id: integer
  }
  Payment *-- "1" PaymentMethod

  interface PaymentMethod {
    void process()
  }

  class Cash implements PaymentMethod {
    void process()
  }

  class Visa implements PaymentMethod  {
    +accountNumber: String
    +securityCode: String
    +expirationDate: Date
    void process()
  }
  Visa .. "1" VisaPaymentProcessingACL: integration

  interface VisaPaymentProcessingACL

}



namespace kitchen {

  class Order {
    +id: integer
  }
  Order o-- "1" ordering.Order
  Order *-- "0..*" OrderItem

  class OrderItem {
    +quantity: integer
    +size: shared_kernel.Size
    +status: shared_kernel.KitchenStatus
    void setReady()
  }

  OrderItem o-- "1" Recipe

  class Recipe

  class Storage?




}

namespace supplier {

  note "TODO supplier" as n1

}

namespace management {

  note "TODO management" as n1

}

@enduml
